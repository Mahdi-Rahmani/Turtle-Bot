// Generated by gencpp from file turtlebot3_object_tracker/detectionResponse.msg
// DO NOT EDIT!


#ifndef TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONRESPONSE_H
#define TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot3_object_tracker
{
template <class ContainerAllocator>
struct detectionResponse_
{
  typedef detectionResponse_<ContainerAllocator> Type;

  detectionResponse_()
    : xc(0.0)
    , yc(0.0)
    , width(0.0)
    , height(0.0)
    , image_x(0.0)
    , image_y(0.0)  {
    }
  detectionResponse_(const ContainerAllocator& _alloc)
    : xc(0.0)
    , yc(0.0)
    , width(0.0)
    , height(0.0)
    , image_x(0.0)
    , image_y(0.0)  {
  (void)_alloc;
    }



   typedef double _xc_type;
  _xc_type xc;

   typedef double _yc_type;
  _yc_type yc;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _image_x_type;
  _image_x_type image_x;

   typedef double _image_y_type;
  _image_y_type image_y;





  typedef boost::shared_ptr< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct detectionResponse_

typedef ::turtlebot3_object_tracker::detectionResponse_<std::allocator<void> > detectionResponse;

typedef boost::shared_ptr< ::turtlebot3_object_tracker::detectionResponse > detectionResponsePtr;
typedef boost::shared_ptr< ::turtlebot3_object_tracker::detectionResponse const> detectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator1> & lhs, const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.xc == rhs.xc &&
    lhs.yc == rhs.yc &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.image_x == rhs.image_x &&
    lhs.image_y == rhs.image_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator1> & lhs, const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot3_object_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e8627ee9d799f957ccbb174713a00fe";
  }

  static const char* value(const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e8627ee9d799f95ULL;
  static const uint64_t static_value2 = 0x7ccbb174713a00feULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot3_object_tracker/detectionResponse";
  }

  static const char* value(const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xc\n"
"float64 yc\n"
"float64 width\n"
"float64 height\n"
"float64 image_x\n"
"float64 image_y\n"
;
  }

  static const char* value(const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xc);
      stream.next(m.yc);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.image_x);
      stream.next(m.image_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot3_object_tracker::detectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "xc: ";
    Printer<double>::stream(s, indent + "  ", v.xc);
    s << indent << "yc: ";
    Printer<double>::stream(s, indent + "  ", v.yc);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "image_x: ";
    Printer<double>::stream(s, indent + "  ", v.image_x);
    s << indent << "image_y: ";
    Printer<double>::stream(s, indent + "  ", v.image_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONRESPONSE_H
