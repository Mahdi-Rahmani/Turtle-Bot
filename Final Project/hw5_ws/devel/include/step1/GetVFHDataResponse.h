// Generated by gencpp from file step1/GetVFHDataResponse.msg
// DO NOT EDIT!


#ifndef STEP1_MESSAGE_GETVFHDATARESPONSE_H
#define STEP1_MESSAGE_GETVFHDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace step1
{
template <class ContainerAllocator>
struct GetVFHDataResponse_
{
  typedef GetVFHDataResponse_<ContainerAllocator> Type;

  GetVFHDataResponse_()
    : desired_angle(0.0)
    , h_prim_c(0.0)  {
    }
  GetVFHDataResponse_(const ContainerAllocator& _alloc)
    : desired_angle(0.0)
    , h_prim_c(0.0)  {
  (void)_alloc;
    }



   typedef double _desired_angle_type;
  _desired_angle_type desired_angle;

   typedef double _h_prim_c_type;
  _h_prim_c_type h_prim_c;





  typedef boost::shared_ptr< ::step1::GetVFHDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::step1::GetVFHDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetVFHDataResponse_

typedef ::step1::GetVFHDataResponse_<std::allocator<void> > GetVFHDataResponse;

typedef boost::shared_ptr< ::step1::GetVFHDataResponse > GetVFHDataResponsePtr;
typedef boost::shared_ptr< ::step1::GetVFHDataResponse const> GetVFHDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::step1::GetVFHDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::step1::GetVFHDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::step1::GetVFHDataResponse_<ContainerAllocator1> & lhs, const ::step1::GetVFHDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.desired_angle == rhs.desired_angle &&
    lhs.h_prim_c == rhs.h_prim_c;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::step1::GetVFHDataResponse_<ContainerAllocator1> & lhs, const ::step1::GetVFHDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace step1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::step1::GetVFHDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::step1::GetVFHDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::step1::GetVFHDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::step1::GetVFHDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::step1::GetVFHDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::step1::GetVFHDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::step1::GetVFHDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3b9ed196b65d1013a3533ff01d9a282";
  }

  static const char* value(const ::step1::GetVFHDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3b9ed196b65d101ULL;
  static const uint64_t static_value2 = 0x3a3533ff01d9a282ULL;
};

template<class ContainerAllocator>
struct DataType< ::step1::GetVFHDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "step1/GetVFHDataResponse";
  }

  static const char* value(const ::step1::GetVFHDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::step1::GetVFHDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 desired_angle\n"
"float64 h_prim_c\n"
;
  }

  static const char* value(const ::step1::GetVFHDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::step1::GetVFHDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_angle);
      stream.next(m.h_prim_c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetVFHDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::step1::GetVFHDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::step1::GetVFHDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "desired_angle: ";
    Printer<double>::stream(s, indent + "  ", v.desired_angle);
    s << indent << "h_prim_c: ";
    Printer<double>::stream(s, indent + "  ", v.h_prim_c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STEP1_MESSAGE_GETVFHDATARESPONSE_H
