#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import numpy as np
import tf #added
from sensor_msgs.msg import LaserScan #added
from nav_msgs.msg import Odometry #added
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
from math import radians #added


class ControlLane():
    def __init__(self):
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.laser_sunscriber = rospy.Subscriber("/scan" ,LaserScan ,callback=self.laser_callback) #added
        #self.odom_sunscriber = rospy.Subscriber("/odom" ,Odometry ,callback=self.odom_callback)  
        #self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)

        self.lastError = 0
        self.MAX_VEL = 0.1
        # added
        self.frontdis = 10 
        self.rightdis = 0 
        self.leftdis = 0 
        self.left_behinddis = 0
        self.right_behinddis = 0 
        self.left_frontdis = 0 
        self.obsNum = 0
        self.errorConst = 500
        self.Kp = 0.0025
        self.Kd = 0.007
        self.meanRightDis = 0

        rospy.on_shutdown(self.fnShutDown)

    def laser_callback(self, msg: LaserScan):
        self.frontdis = msg.ranges[0]
        self.rightdis = msg.ranges[270]
        self.leftdis = msg.ranges[90]
        self.left_behinddis = msg.ranges[160]
        self.right_behinddis = msg.ranges[210]
        self.left_frontdis = msg.ranges[45]
        self.right_frontdis = msg.ranges[270+45: 270+65]
        self.getRightDis(msg)


    def cbGetMaxVel(self, msg: Float64):
        return 0
    def getRightDis(self, msg: LaserScan):
        min = 100
        for i in range(60):
            if msg.ranges[240 + i] < min:
                min = msg.ranges[240 + i]

        self.meanRightDis = min


    def cbFollowLane(self, desired_center):


        if self.frontdis < 0.4 and self.leftdis < 0.2 and self.obsNum == 0:
            rospy.loginfo("obs1")
            self.errorConst = 700
            self.obsNum = 1
            self.Kp = 0.001
            self.Kd = 0.007
        # rospy.loginfo(f"max(self.right_frontdis) > 0.4: {max(self.right_frontdis) > 0.4}")
        # rospy.loginfo(f"self.rightdis < 0.3: {self.rightdis < 0.3}")
        # if max(self.right_frontdis) > 0.4 and self.rightdis < 0.3 and self.obsNum == 1:
        #     self.errorConst = 140
        #     self.obsNum = 2
        #     self.Kp = 0.0008
        #     self.Kd = 0.007
        #     rospy.loginfo("obs2")
        if self.frontdis > 1 and self.leftdis < 0.7 and self.obsNum == 2:
            self.errorConst = 500
            self.obsNum = 3
            self.Kp = 0.0025
            self.Kd = 0.007
            rospy.loginfo("obs3")

        if 0.2 < self.left_behinddis < 0.8 and self.obsNum == 1:
            rospy.loginfo("obs2")
            self.errorConst = 100
            self.obsNum = 2
            twist = Twist()
            self.pub_cmd_vel.publish(twist)
            self.turnObs2()
        #     #self.Kp = 0.0001
        #     #self.Kd = 0.007
        # if self.left_frontdis > 1 and self.right_behinddis > 0.4 and self.right_behinddis < 0.5 and self.meanRightDis > 3 and self.obsNum == 2:
        #     self.errorConst = 500
        #     self.obsNum = 3
        #     self.Kp = 0.0025
        #     self.Kd = 0.007
        #     rospy.loginfo("obs3")
            

        center = desired_center.data

        error = center - self.errorConst
        rospy.loginfo(f"error : {error}")
        angular_z = self.Kp * error + self.Kd * (error - self.lastError)
        self.lastError = error
        
        twist = Twist()
        # twist.linear.x = 0.05        
        twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / self.errorConst) ** 2), 0.1)
        if self.obsNum == 2 and twist.linear.x < 0.03:
            twist.linear.x =0.03

        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
        self.pub_cmd_vel.publish(twist) #changed
        





    def get_heading(self):

        msg = rospy.wait_for_message("/odom", Odometry)

        orientation = msg.pose.pose.orientation

        roll, pitch, yaw = tf.transformations.euler_from_quaternion((
            orientation.x ,orientation.y ,orientation.z ,orientation.w
        ))

        return yaw
    
    def turnObs2(self):
        remaining = radians(80)
        prev_angle = self.get_heading()
        rospy.loginfo(remaining)

        twist = Twist()
        twist.angular.z = -0.2
        self.pub_cmd_vel.publish(twist)

        while remaining >= 0.1:
            current_angle = self.get_heading()
            delta = abs(prev_angle - current_angle)
            remaining -= delta
            prev_angle = current_angle
    





    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
